---
# Permission to look up Pod details
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aeron-bootstrap
rules:
  # Allow reading pods to find bootstrap neighbors
  - apiGroups: [""]
    resources: [pods]
    verbs: [get, list]
---
# Serviceaccount for aeron-bootstrap to run under
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aeron-bootstrap
---
# Bind the previously created role to the aeron-bootstrap service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aeron-bootstrap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aeron-bootstrap
subjects:
  - kind: ServiceAccount
    name: aeron-bootstrap
    namespace: default
---
# A deployment to demonstrate the created bootstrap aeron properties file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-aeron-bootstrap
  labels:
    app: example-aeron-bootstrap
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-aeron-bootstrap
  template:
    metadata:
      labels:
        app: example-aeron-bootstrap
        aeron.io/media-driver: "true"
    spec:
      initContainers:
        - name: aeron-bootstrap
          image: jmips/aeronmd-bootstrap
          imagePullPolicy: IfNotPresent

          env:
            # example config to alter discovery process goes here
            - name: AERON_MD_DISCOVERY_PORT
              value: "8050"

          volumeMounts:
            - mountPath: /etc/aeron
              name: aeron-md-config-dir

      containers:
        # Example container that does nothing, as a placeholder for Aeron code.
        - name: example-aeron
          image: ubuntu
          command: ["sleep"]
          args: ["infinity"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /etc/aeron
              name: aeron-md-config-dir

      serviceAccount: aeron-bootstrap
      volumes:
        - emptyDir: {}
          name: aeron-md-config-dir
